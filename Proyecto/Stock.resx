<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAE8AAACxAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFgAAADmAAAA/wAAAP4AAAD/AAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAF8AAADrAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA1gAAABgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGYAAADxAAAA/wAAAP8AAAD/AAAA7wAAAGUAAACgAAAA/wAAAP8AAAD/AAAA/wAA
        AHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGoAAAD1AAAA/wAAAP8AAAD/AAAA6AAAAFsAAAAAAAAAAAAAAJYAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAANUAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAG8AAAD3AAAA/wAAAP8AAAD/AAAA4wAAAFIAAAAAAAAAAAAAAAAAAAAAAAAAlQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        HwCAAPgB4APAD/wBAH//gAH//+AP///8f/8=
</value>
  </data>
</root>